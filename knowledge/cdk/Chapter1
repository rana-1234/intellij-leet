************ AWS CDK ********

Link : https://docs.aws.amazon.com/cdk/v2/guide/home.html

1. A framework for defining cloud infrastructure in code and provisioning it through AWS CloudFormation.
Features
    Build with high-level constructs that automatically provide sensible, secure defaults for your AWS resources, defining more infrastructure with less code.
    Use programming idioms like parameters, conditionals, loops, composition, and inheritance to model your system design from building blocks provided by AWS and others
    Put your infrastructure, application code, and configuration all in one place, ensuring that at every milestone you have a complete, cloud-deployable system.
    Connect your AWS resources together (even across stacks) and grant permissions using simple, intent-oriented APIs.
    Import existing AWS CloudFormation templates to give your resources a CDK API.
    Use the power of AWS CloudFormation to perform infrastructure deployments predictably and repeatedly, with rollback on error.

The AWS CDK supports TypeScript, JavaScript, Python, Java, C#/.Net, and Go.
Developers can use one of these supported programming languages to define reusable cloud components known as Constructs.
You compose these together into Stacks and Apps.

/-- App
       -- Stack1
            -- Construct1
                    -- AmazonSQS
                    -- AWS Lambda
            -- Construct2
                    -- Amazon S3 Bucket
                    -- Amazon DynamoDB
       -- Stack2
            -- Construct1
                    -- ECSFargate Service

* Any resource can access any other resource within an app.
With CDK
    --> the cloudFormation Templates gets created (cdk synth)
    --> the cloudFormation Template then can be deployed (cdk deploy)
    --> We can test our infra code with jest framework. (Major Benefit)

* Command to create a cdk package
    cdk init --language typescript

************ Construct Programming models *************


