************* Task ***************
A Task state ("Type": "Task") represents a single unit of work performed by a state machine.

All work in your state machine is done by tasks. A task performs work by using an activity or an AWS Lambda function, or by passing parameters to the API actions of other services.

An activity consists of program code that waits for an operator to perform an action or to provide input.
You can host activities on Amazon EC2, on Amazon ECS, or even on mobile devices.
Activities poll Step Functions using the GetActivityTask and SendTaskSuccess, SendTaskFailure, and SendTaskHeartbeat API actions.

Fields

Resource (Required)
    A URI, especially an ARN that uniquely identifies the specific task to execute.
Parameters (Optional)
    Used to pass information to the API actions of connected resources. The parameters can use a mix of static JSON and JsonPath. For more information, see Pass Parameters to a Service API.

ResultPath (Optional)
    Specifies where (in the input) to place the results of executing the task that's specified in Resource.
    The input is then filtered as specified by the OutputPath field (if present) before being used as the state's output.
    For more information, see Input and Output Processing.

ResultSelector (Optional)
    Pass a collection of key value pairs, where the values are static or selected from the result. For more information, see ResultSelector.

Retry
    An array of objects, called Retriers, that define a retry policy if the state encounters runtime errors. For more information, see Examples using Retry and using Catch.

Catch (Optional)
    An array of objects, called Catchers, that define a fallback state. This state is executed if the state encounters runtime errors and its retry policy is exhausted or isn't defined. For more information, see Fallback States.

TimeoutSeconds (Optional)
    If the task runs longer than the specified seconds, this state fails with a States.Timeout error name.

TimeoutSecondsPath (Optional)
    If you want to provide a timeout value dynamically from the state input using a reference path, use TimeoutSecondsPath. When resolved, the reference path must select fields whose values are positive integers

    * A Task state cannot include both TimeoutSeconds and TimeoutSecondsPath

HeartbeatSeconds (Optional)
    If more time than the specified seconds elapses between heartbeats from the task, this state fails with a States.Timeout error name.

HeartbeatSecondsPath (Optional)

************** Task state timeouts and heartbeat intervals ************
It's a good practice to set a timeout value and a heartbeat interval for long-running activities. This can be done by specifying the timeout and heartbeat values, or by setting them dynamically.

E.g.

Static :
"ActivityState": {
  "Type": "Task",
  "Resource": "arn:aws:states:us-east-1:123456789012:activity:HelloWorld",
  "TimeoutSeconds": 300, // if task does not complete within this much second, this state would be timed out with error state.Timeout
  "HeartbeatSeconds": 60, // if heart beat of the task (Lambda) fails for this seconds, again error out
  "Next": "NextState"
}

Dynamic

"ActivityState": {
  "Type": "Task",
  "Resource": "arn:aws:states:::glue:startJobRun.sync",
  "Parameters": {
    "JobName": "myGlueJob"
  },
  "TimeoutSecondsPath":  "$.params.maxTime", // this is taking from variable called params.maxTime
  "HeartbeatSecondsPath": "$.params.heartbeat", // this is taking from variable called params.heartbeat
  "Next": "NextState"
}

************* Specifying Resource ARNs in Tasks ************
The Resource field's ARN is specified using the following pattern.
    arn:partition:service:region:account:task_type:name

In this above
    partition is the AWS Step Functions partition to use, most commonly aws.
    service indicates the AWS service used to execute the task, and is:
        states for an activity
        lambda for a lambdaFunction
    region is aws region where Step Functions activity or state machine type or Lambda function has been created.
    account is your AWS account ID.
    task_type is the type of task to run. It is one of the following values:
        activity – An activity.
        function – A Lambda function.
        <service_name> – The name of a supported connected service
    name is the registered resource name (activity name, Lambda function name, or service API action).


**************** Task types *******************
Following task type are supported as of now.
* Activity
* Lambda functions
* A supported AWS service

Activity
    Activities represent workers (processes or threads), implemented and hosted by you,
    that perform a specific task. They are supported only by Standard Workflows, not Express Workflows.

    Activity resource ARNs use the following syntax.
        arn:partition:states:region:account:activity:name
    Fixed : activity

Lambda functions
    Lambda tasks execute a function using AWS Lambda. To specify a Lambda function, use the ARN of the Lambda function in the Resource field.
    Lambda function Resource ARNs use the following syntax.
    arn:partition:lambda:region:account:function:function_name
    function and lambda is constant

A supported AWS service
    When you reference a connected resource, Step Functions directly calls the API actions of a supported service.
    Specify the service and action in the Resource field.
    Connected service Resource ARNs use the following syntax.
        arn:partition:states:region:account:servicename:APIname
        <service name> and api name are constant

    For e.g.
        {
         "StartAt": "BATCH_JOB",
         "States": {
           "BATCH_JOB": {
             "Type": "Task",
             "Resource": "arn:aws:states:::batch:submitJob.sync",
             "Parameters": {
               "JobDefinition": "preprocessing",
               "JobName": "PreprocessingBatchJob",
               "JobQueue": "SecondaryQueue",
               "Parameters.$": "$.batchjob.parameters",
               "RetryStrategy": {
                  "attempts": 5
                }
             },
             "End": true
            }
          }
        }

